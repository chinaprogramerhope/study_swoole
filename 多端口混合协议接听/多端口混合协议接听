通过上面的实例可以看到，使用上面的方法进行多端口监听有诸多的局限性：协议单一，回
调函数无法区分等。在实际应用中，我们往往希望服务能够同时监听两个端口，并且两个端
口分别采用不同的协议，比如一个端口采用RPC协议提供服务，另一个端口提供Http协议用
于Web管理页面。 因此，Swoole从1.8.0版本开始提供了一套全新的多端口监听方式。在
1.8.0以后的版本，Server可以监听多个端口，每个端口都可以设置不同的协议处理方式(set)
和回调函数(on) 开始监听新端口的代码如下：

$port1 = $server->listen('127.0.0.1', 9501, SWOOLE_SOCK_TCP);
$port2 = $server->listen('127.0.0.1', 9502, SWOOLE_SOCK_UDP);
$port3 = $server->listen('127.0.0.1', 9503, SWOOLE_SOCK_TCP | SWOOLE_SSL);

可以看到，新添加的监听端口可以设置多种属性，监听的IP，端口号，TCP或者UDP，是否
需要SSL加密。 除此之外，每个新建立的Port对象还可以分别设置配置选项，如下所示：

$port1->set( // 开启固定包头协议
    'open_length_check' => true,
    'package_length_type' => 'N',
    'package_length_offset' => 0,
    'package_max_length' => 800000,
);

$port3->set( // 开启EOF协议并设置SSL文件
    'open_eof_split' => true,
    'package_eof' => "\r\n",
    'ssl_cert_file' => 'ssl.cert',
    'ssl_key_file' => 'ssl.key',
);

除了协议不同，每个Port还可以设置自己独有的回调函数，由此避免了在同一个回调函数里针
对数据来源进行判定的问题。

$port1->on('receive', function ($serv, $fd, $from_id, $data) {
    $serv->send($fd, 'Swoole: ' . $data);
    $serv->close($fd);
});
$port3->on('receive', function ($serv, $fd, $from_id, $data) {
    echo "Hello {$fd} : {$data}\n";
});
























